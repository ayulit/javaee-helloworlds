<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:tx="http://www.springframework.org/schema/tx"
			
	xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/jdbc
		http://www.springframework.org/schema/jdbc/spring-jdbc.xsd
		http://www.springframework.org/schema/tx
		http://www.springframework.org/schema/tx/spring-tx.xsd			
		">
	
	<!-- Needed for find classes annotated by @Component, 
	so it's the basic part of annot-style config -->
	<context:component-scan base-package="com.ayulit.base"/>

	<!-- The most important bean of all this JPA config! -->
	<bean id="emf" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<!-- injecting bean of a DataSource -->
		<property name="dataSource" ref="dataSource"/>
		
		<!-- Using Hibernate as ORM tool (persistence provider) -->
		<property name="jpaVendorAdapter">
			<bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter"></bean>
		</property>
		
		<!-- Needed for find classes annotated by ORM annotations -->
		<!-- We don't need to use persisitence.xml then (works from Spring 3.1) -->
		<property name="packagesToScan" value="com.ayulit.base"/>
		
		<!-- This gives properties for current persistence provider (Hibernate) -->
		<property name="jpaProperties">
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.PostgreSQLDialect</prop>
				<prop key="hibernate.max_fetch_depth">3</prop>
				<prop key="hibernate.jdbc.fetch_size">50</prop>
				<prop key="hibernate.jdbc.batch_size">10</prop>
				<prop key="hibernate.show_sql">true</prop>
			</props>
		</property>
	</bean>

	<!-- dataSource is like generalised factory for connections  -->
	<!-- We will use Spring's realization of 'dataSource'  -->  
	<bean id="dataSource"
	      class="org.springframework.jdbc.datasource.DriverManagerDataSource">
	      <!-- we use client driver from PostgreSQL dependency -->
	      <property name="driverClassName" value="org.postgresql.Driver"/>
	      <!-- we use server, configured on our system with existed db -->
	      <property name="url" value="jdbc:postgresql://localhost:5432/grocery"/>
	      
	      <property name="username" value="postgres"/>
	      <property name="password" value="123"/>	      
    </bean>	
	
	<!-- Needed for find classes annotated by @Transaction -->
	<tx:annotation-driven transaction-manager="transactionManager"/>
	
	<!-- EntityManagerFactory needs TransactionManager for transactional access to data -->
	<!-- Luckily Spring has TransactionManager straight for JPA -->
	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="emf"/>
	</bean>
							
</beans>